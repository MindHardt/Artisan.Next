@page "/Minnies"
@using Artisan.Next.Client.JsInterop
@using Microsoft.Extensions.Options
@using System.Text.Json
@using Artisan.Next.Client.Contracts

@inject HttpClient HttpClient
@inject DownloadJsInterop Download
@inject IOptions<JsonSerializerOptions> JsonOptions
@inject IBackendClient BackendClient

<PageTitle>Минифигурки</PageTitle>

<h3>Минифигурки</h3>

<div class="mb-3">
    <InputFile OnChange="@UploadMinifigureImage" class="form-control" accept="image/*" hidden id="minnie-image-input"/>
    <button 
        class="btn btn-lg btn-primary" 
        disabled="@IsFilled" 
        onclick="document.getElementById('minnie-image-input').click()">
        <i class="bi bi-plus-circle"></i>
        Добавить минифигурку
    </button>
</div>

<hr/>
<InputFile id="import-json" hidden accept="application/json" OnChange="@ImportJson"/>
<button class="btn btn-success" onclick="document.getElementById('import-json').click()">
    <i class="bi bi-upload"></i>
    Импорт JSON
</button>
<button class="btn btn-success" @onclick="@ExportJson">
    <i class="bi bi-download"></i>
    Экспорт JSON
</button>
<button class="btn btn-danger" @onclick="@(() => _minnies.Clear())">
    <i class="bi bi-trash"></i>
    Очистить
</button>
@if (_minnies.Any())
{
    <table class="table table-sm table-striped table-hover w-50">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Имя</th>
            <th scope="col">Удалить</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var row in _minnies.Select((minnie, i) => (minnie, i)))
        {
            var isExtra = row.i >= _currentTemplate.Count;
            <tr>
                <th scope="row">@(row.i + 1)</th>
                <td>
                    <div class="form-group">
                        <InputText @bind-Value="@row.minnie.Name" class="form-control" readonly="@isExtra" />
                    </div>
                </td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="@(() => _minnies.RemoveAt(row.i))">
                        <i class="bi bi-trash"></i>
                    </button>
                    <button class="btn btn-primary"
                            @onclick="@(() => _minnies.Insert(row.i + 1, row.minnie with { }))"
                            disabled="@IsFilled">
                        <i class="bi bi-copy"></i>
                    </button>
                    <button class="btn btn-secondary" 
                            @onclick="@(() => { _minnies.RemoveAt(row.i); _minnies.Insert(0, row.minnie); })" 
                            disabled="@(row.i == 0)">
                        <i class="bi bi-chevron-double-up"></i>
                    </button>
                    <button class="btn btn-secondary" 
                            @onclick="@(() => (_minnies[row.i - 1], _minnies[row.i]) = (_minnies[row.i], _minnies[row.i - 1]))" 
                            disabled="@(row.i == 0)">
                        <i class="bi bi-chevron-up"></i>
                    </button>
                    <button class="btn btn-secondary" 
                            @onclick="@(() => { _minnies.RemoveAt(row.i); _minnies.Add(row.minnie); })" 
                            disabled="@(row.i == _minnies.Count - 1)">
                        <i class="bi bi-chevron-double-down"></i>
                    </button>
                    <button class="btn btn-secondary" 
                            @onclick="@(() => (_minnies[row.i + 1], _minnies[row.i]) = (_minnies[row.i], _minnies[row.i + 1]))" 
                            disabled="@(row.i == _minnies.Count - 1)">
                        <i class="bi bi-chevron-down"></i>
                    </button>
                    @if (isExtra)
                    {
                        <span class="badge bg-danger" title="Текущий лист минифигурок не вмещает этот спрайт">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            Не влезает
                        </span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
<div class="row">
    <div class="btn-group" role="group" aria-label="Minnie sheet size">
        @foreach (var template in Templates)
        {
            var id = $"{nameof(template)}_{template.Name}";
            <input 
                type="radio" 
                class="btn-check" 
                name="@nameof(Templates)" 
                id="@id" 
                autocomplete="off" 
                checked="@(_currentTemplate == template)"
                @onchange="@(() => SetTemplate(template))">
            <label class="btn btn-primary" for="@id">
                <i class="bi @template.IconClass"></i>
                @template.Name
            </label>
        }
        @if (_originalSvg is not null)
        {
            <button class="btn btn-success" @onclick="@DownloadSvg">
                <i class="bi bi-download"></i>
                SVG
            </button>
        }
    </div>
</div>

@if (_originalSvg is null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <style>
        svg {
            height: 75%;
            width: 100%;
        }
    </style>
    @((MarkupString)PrepareSvg())
}

@code {
    private bool IsFilled => _minnies.Count >= _currentTemplate.Count;
    private record Template(string Name, string Url, string IconClass, int Count);
    private static readonly Template[] Templates =
    [
        new Template("Маленькие", "svg/minnies_small.svg", "bi-person-dash", 24),
        new Template("Большие", "svg/minnies_big.svg", "bi-person-add", 9)
    ];

    private Template _currentTemplate = Templates.First();
    private IReadOnlyCollection<ManagedFileModel> _files = [];

    private string? _originalSvg;

    protected override Task OnInitializedAsync()
        => LoadOriginalSvg();

}