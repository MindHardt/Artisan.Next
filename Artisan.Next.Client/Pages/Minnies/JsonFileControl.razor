@using Artisan.Next.Client.Contracts.Files
@using Refit
@using System.Text.Json
@using System.Net.Mime
@using Artisan.Next.Client.Contracts
@using Artisan.Next.Client.JsInterop
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Options

@inject DownloadJsInterop Download
@inject IOptions<JsonSerializerOptions> JsonOptions
@inject IBackendApi BackendApi
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavigationManager
@inject IWebAssemblyHostEnvironment Environment

<div class="container">
    <div class="row mb-3">
        <h1 class="col">
            JSON файлы
            <div class="spinner-border text-success" role="status" hidden="@_isLoaded">
              <span class="visually-hidden">Loading...</span>
            </div>
        </h1>
    </div>
    <div class="row mb-3">
        <InputFile id="import-json" hidden accept="application/json" OnChange="@InitiateJsonImport"/>
        <div class="btn-group col p-0 w-100">
            <button class="btn btn-success" onclick="document.getElementById('import-json').click()">
                <i class="bi bi-upload"></i>
                Импорт JSON
            </button>
            <button class="btn btn-success" @onclick="@ExportJson">
                <i class="bi bi-download"></i>
                Экспорт JSON
            </button>
        </div>
    </div>
    <AuthorizeView>
        <Authorized>
            <div class="row mb-3 p-0">
                <div class="col-10 p-0">
                    <InputText class="form-control w-100" @bind-Value="@_searchPrompt" placeholder="Поиск файлов"/>
                </div>
                <div class="col-2 p-0">
                    <button class="btn btn-info w-100" @onclick="@SearchFiles">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
            <div class="row mb-3 p-0">
                <table class="table table-sm table-striped table-hover col">
                    <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Имя</th>
                        <th scope="col">Дата изменения</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var row in _files.Select((file, i) => (file, i)))
                    {
                        var baseUri = new string(NavigationManager.Uri.TakeWhile(x => x is not '?').ToArray());
                        var shareUri = $"{baseUri}?{nameof(Page.Shared)}={Uri.EscapeDataString(row.file.UniqueName)}";
                        <tr>
                            <th scope="row">@(row.i + 1)</th>
                            <td>@Path.GetFileNameWithoutExtension(row.file.OriginalName)</td>
                            <td>
                                <span class="badge bg-info">
                                    @row.file.DateUpdated.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-outline-primary" onclick="navigator.clipboard.writeText('@shareUri');alert('Ссылка скопирована!')">
                                    <i class="bi bi-share"></i>
                                </button>
                                <button class="btn btn-success" @onclick="@(() => InitiateJsonImport(row.file))">
                                    <i class="bi bi-cloud-download"></i>
                                </button>
                                <button class="btn btn-danger" @onclick="@(() => DeleteJsonFile(row.file))">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="row mb-3 p-0">
                <div class="col-10 p-0">
                    <InputText class="form-control w-100" @bind-Value="@_savedFileName" placeholder="Имя сохраняемого файла"/>
                </div>
                <div class="col-2 p-0">
                    <button class="btn btn-success w-100" 
                            @onclick="@UploadJsonFile" 
                            disabled="@string.IsNullOrEmpty(_savedFileName)">
                        <i class="bi bi-cloud-upload"></i>
                    </button>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="row mb-3 p-0">
                <div class="card text-center col">
                    <div class="card-body">
                        <h5 class="card-title">
                            Чтобы использовать облако, авторизуйтесь
                        </h5>
                        <button class="btn btn-lg btn-primary" @onclick="() => NavigationManager.NavigateToLogin(Environment)">
                            <i class="bi bi-person-circle"></i>
                            Авторизация
                        </button>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool _isLoaded = false;

    [Parameter]
    public string? InitialFileUrl { get; set; }
    [Parameter, EditorRequired]
    public List<Minifigure> Minnies { get; set; } = null!;
    [Parameter, EditorRequired]
    public EventCallback<List<Minifigure>> MinniesChanged { get; set; }

    private IReadOnlyCollection<ManagedFileModel> _files = [];

    private string _searchPrompt = string.Empty;
    private string _savedFileName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated is true)
        {
            await SearchFiles();
        }

        if (InitialFileUrl is not null)
        {
            InitiateJsonImport(() => BackendApi.ReadFile($"files/{InitialFileUrl}"));
        }
        else
        {
            _isLoaded = true;
        }
    }

    private async Task<Stream> GetJsonStream()
    {
        var images = Minnies
            .Select(x => x.ImageBase64)
            .Distinct()
            .ToArray();
        var minnies = Minnies
            .Select(x => new MinnieJsonModel(Array.IndexOf(images, x.ImageBase64), x.Name))
            .ToArray();
        var export = new MinniesSheetJsonModel(minnies, images);
        var jsonStream = new MemoryStream();
        await JsonSerializer.SerializeAsync(jsonStream, export, JsonOptions.Value);
        jsonStream.Seek(0, SeekOrigin.Begin);
        return jsonStream;
    }

    private async Task ExportJson()
    {
        await using var jsonStream = await GetJsonStream();
        var fileName = string.IsNullOrEmpty(_savedFileName)
            ? "minnies.json"
            : $"{_savedFileName}.json";

        await Download.DownloadAsync(jsonStream, fileName);
    }

    private async Task UploadJsonFile()
    {
        await using var jsonStream = await GetJsonStream();

        var fileName = $"{_savedFileName}.json";
        await BackendApi.PostFile(
            new PostFileRequest<StreamPart>
            {
                File = new StreamPart(jsonStream, fileName, "application/json"),
                Scope = ManagedFileScope.MinniesSheet
            });

        _savedFileName = string.Empty;
        await SearchFiles();
    }

    private async Task DeleteJsonFile(ManagedFileModel file)
    {
        await BackendApi.DeleteFile(new DeleteFileRequest
        {
            UniqueName = file.UniqueName
        });
        await SearchFiles();
    }

    private async Task SearchFiles()
    {
        _files = await BackendApi.GetFiles(
            new GetFilesRequest
            {
                PartialName = _searchPrompt,
                RestrictToScope = ManagedFileScope.MinniesSheet
            });
    }

    private void InitiateJsonImport(ManagedFileModel file)
        => InitiateJsonImport(() => BackendApi.ReadFile(file));

    private void InitiateJsonImport(InputFileChangeEventArgs e)
        => InitiateJsonImport(() => Task.FromResult(e.File.OpenReadStream(1024 * 1024 * 20)));

    private void InitiateJsonImport(Func<Task<Stream>> streamTask)
    {
        _isLoaded = false;
        StateHasChanged();

        _ = Task.Factory.StartNew(async () =>
        {
            await using var jsonStream = await streamTask();
            var model = await JsonSerializer.DeserializeAsync<MinniesSheetJsonModel>(jsonStream, JsonOptions.Value);
            var newMinnies = model!.Minnies.Select(x => new Minifigure
            {
                ImageBase64 = model.Images[x.ImageIndex],
                Name = x.Name
            });
            Minnies.AddRange(newMinnies);

            _isLoaded = true;
            await MinniesChanged.InvokeAsync(Minnies);

        }, TaskCreationOptions.LongRunning);
    }

    private record MinnieJsonModel(int ImageIndex, string Name);
    private record MinniesSheetJsonModel(MinnieJsonModel[] Minnies, string[] Images);
}