@inject DownloadJsInterop Download
@inject IMemoryCache Cache
@inject IBackendApi Backend

@using Artisan.Next.Client.JsInterop
@using Microsoft.Extensions.Caching.Memory
@using Artisan.Next.Client.Contracts

<div>
    <div class="btn-group w-100">
        @foreach (var template in Templates)
        {
            var buttonClass = Template == template
                ? "active"
                : string.Empty;
            <button class="btn btn-lg btn-outline-primary @buttonClass" @onclick="@(() => SetTemplate(template))">
                <i class="bi @template.IconClass"></i>
                @template.Name
            </button>
        }
        <button class="btn btn-lg btn-success" @onclick="@DownloadSvg" disabled="@(_originalSvg is null)">
            <i class="bi bi-download"></i>
            SVG
        </button>
    </div>
    
    @if (_originalSvg is null)
    {
        <div class="mx-auto">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <style>
            svg {
                height: 75%;
                width: 100%;
            }
        </style>
        @((MarkupString)PrepareSvg())
    }
</div>

@code {
    [Parameter, EditorRequired]
    public IReadOnlyCollection<Template> Templates { get; set; } = null!;

    [Parameter, EditorRequired]
    public Template Template { get; set; } = null!;
    [Parameter, EditorRequired]
    public EventCallback<Template> TemplateChanged { get; set; }

    [Parameter, EditorRequired]
    public List<Minifigure> Minnies { get; set; } = null!;

    private string? _originalSvg;

    protected override async Task OnInitializedAsync()
    {
        Template = Templates.First();
        await TemplateChanged.InvokeAsync(Template);
        foreach (var svgUrl in Templates.Select(x => x.Url))
        {
            var svg = TransformOriginalSvg(await Backend.ReadFileAsString(svgUrl));
            Cache.Set(svgUrl, svg);
        }
        SetOriginalSvg();
    }

    private async Task DownloadSvg()
        => await Download.DownloadAsync(PrepareSvg(), $"{Path.GetRandomFileName()}.svg");

    private void SetTemplate(Template template)
    {
        Template = template;
        SetOriginalSvg();
    }

    private void SetOriginalSvg()
    {
        _originalSvg = Cache.Get<string>(Template.Url);
    }
}