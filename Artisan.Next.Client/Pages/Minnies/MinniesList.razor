@using Microsoft.Extensions.Caching.Memory
@inject IMemoryCache Cache
@inject ILogger<MinniesList> Logger

<div class="container">
    <div class="row mb-3">
        <h1 class="col">
            Минифигурки
            <InputFile OnChange="@AddMinifigureImage" class="form-control" accept="image/*" hidden id="minnie-image-input"/>
        </h1>
    </div>
    <div class="row mb-3">
        <div class="btn-group col p-0 w-100">
            <button
                class="btn btn-primary"
                disabled="@IsFilled"
                onclick="document.getElementById('minnie-image-input').click()">
                <i class="bi bi-plus-circle"></i>
                Добавить минифигурку
            </button>
        </div>
    </div>
    @if (Minnies.Any())
    {
        <div class="row mb-3">
            <table class="table table-sm table-striped table-hover col">
                <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Имя</th>
                    <th scope="col"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var row in Minnies.Select((minnie, i) => (minnie, i)))
                {
                    var isExtra = row.i >= Template.Count;
                    <tr>
                        <th scope="row">@(row.i + 1)</th>
                        <td>
                            <div class="form-group">
                                <InputText @bind-Value="@row.minnie.Name" class="form-control" readonly="@isExtra"/>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="@(() => CopyMinnie(row.minnie, row.i))"
                                    disabled="@IsFilled">
                                <i class="bi bi-copy"></i>
                            </button>
                            <button class="btn btn-danger"
                                    @onclick="@(() => RemoveMinnie(row.i))">
                                <i class="bi bi-trash"></i>
                            </button>
                            @if (isExtra)
                            {
                                <span class="badge bg-danger" title="Текущий лист минифигурок не вмещает этот спрайт">
                                    <i class="bi bi-exclamation-triangle-fill"></i>
                                    Не влезает
                                </span>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="row mb-3">
            <div class="btn-group col p-0 w-100">
                <button class="btn btn-danger" @onclick="@ClearMinnies">
                    <i class="bi bi-trash"></i>
                    Очистить
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<Minifigure> Minnies { get; set; } = null!;
    [Parameter, EditorRequired]
    public EventCallback<List<Minifigure>> MinniesChanged { get; set; }
    [Parameter, EditorRequired]
    public Template Template { get; set; } = null!;

    private bool IsFilled => Minnies.Count >= Template.Count;
    private const string CacheKey = "Minnies";

    protected override void OnAfterRender(bool firstRender)
    {
        Cache.Set(CacheKey, Minnies);
        Logger.LogInformation("Cached minnies with {Count} entries", Minnies.Count);
    }

    protected override async Task OnInitializedAsync()
    {
        if (Cache.Get<List<Minifigure>>(CacheKey) is { Count: > 0 } cachedMinnies && 
            cachedMinnies.SequenceEqual(Minnies) is false)
        {
            Logger.LogInformation("Retrieved {Count} minnies from cache", cachedMinnies.Count);
            Minnies = cachedMinnies;
            await MinniesChanged.InvokeAsync(Minnies);
        }
    }

    private async Task AddMinifigureImage(InputFileChangeEventArgs e)
    {
        var minnieImage = await e.File.RequestImageFileAsync("jpeg", 1024, 1024);
        var minnieName = Path.GetFileNameWithoutExtension(minnieImage.Name);

        await using var imageStream = minnieImage.OpenReadStream(long.MaxValue);
        var base64Stream = new MemoryStream();
        await imageStream.CopyToAsync(base64Stream);

        var base64String = Convert.ToBase64String(base64Stream.ToArray());
        var minnie = new Minifigure
        {
            Name = minnieName,
            ImageBase64 = base64String
        };
        Minnies.Add(minnie);
        await MinniesChanged.InvokeAsync(Minnies);
    }

    private async Task CopyMinnie(Minifigure minnie, int index)
    {
        Minnies.Insert(index + 1, minnie with { });
        await MinniesChanged.InvokeAsync(Minnies);
    }

    private async Task RemoveMinnie(int index)
    {
        Minnies.RemoveAt(index);
        await MinniesChanged.InvokeAsync(Minnies);
    }

    private async Task ClearMinnies()
    {
        Minnies.Clear();
        await MinniesChanged.InvokeAsync(Minnies);
    }
}