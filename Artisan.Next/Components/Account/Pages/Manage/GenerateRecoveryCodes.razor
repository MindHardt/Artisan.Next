@page "/Account/Manage/GenerateRecoveryCodes"
@using Artisan.Next.Data.Entities
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Генерация кодов восстановления двухфакторной аутентификации (2FA)</PageTitle>

@if (_recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="_recoveryCodes.ToArray()" StatusMessage="@_message"/>
}
else
{
    <h3>Генерация кодов восстановления двухфакторной аутентификации (2FA)</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <span class="glyphicon glyphicon-warning-sign"></span>
            <strong>Храните эти коды в безопасном месте и ни с кем не делитесь.</strong>
        </p>
        <p>
            Если вы потеряете устройство и у вас не будет кодов восстановления вы потеряете доступ к своему аккаунту.
        </p>
        <p>
            Отключение 2FA не меняет ключи в приложениях-аутентификаторах. Если вы хотите сменить ключ, используемый
            в приложении вам нужно <a class="link-info" href="Account/Manage/ResetAuthenticator">установить ключи аутентификации.</a>
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken/>
            <button class="btn btn-danger" type="submit">Generate Recovery Codes</button>
        </form>
    </div>
}

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private IEnumerable<string>? _recoveryCodes;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(_user);
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(_user);
        _recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(_user, 10);
        _message = "You have generated new recovery codes.";

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }

}