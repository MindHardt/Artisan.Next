@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Artisan.Next.Data.Entities
@using Artisan.Next.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ManagedFileService ManagedFileService

<PageTitle>Профиль</PageTitle>

<h3>Профиль</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6 d-grid gap-2">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post" enctype="multipart/form-data" >
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" placeholder="Введите ваше имя пользователя." id="username" />
                <label for="username" class="form-label">Имя пользователя</label>
                <ValidationMessage For="@(() => Input.UserName)" class="text-danger" />
            </div>
            @if (_avatarSrc is not null)
            {
                <div class="card mb-3" style="width: 25rem">
                    <img src="@_avatarSrc" class="card-img-top img-thumbnail" alt="Avatar" id="avatar" style="object-fit: fill;width: 25rem; height: 25rem;">
                    <div class="card-body">
                        <div class="btn btn-primary btn-lg start-50 translate-middle-x position-relative w-100" onclick="document.getElementById('new-avatar').click()">
                            Сменить аватар
                        </div>
                        <input type="file" class="form-control" accept="image/*" id="new-avatar" name="Input.NewAvatar" hidden/>
                    </div>
                </div>
                <script>
                    document.getElementById('new-avatar').onchange = function(e) {
                        document.getElementById('avatar').src = URL.createObjectURL(e.target.files[0]);
                    }
                </script>
            }
            else
            {
                <button class="btn btn-primary" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сохранить</button>
        </EditForm>
        <hr/>
        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
            <button type="submit" class="w-100 btn btn-lg btn-secondary mb-3">
                Выйти
            </button>
        </form>
    </div>
</div>

@code {
    private string? _currentUrl;
    private ApplicationUser _user = null!;
    private string? _username;
    private string? _avatarSrc;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _avatarSrc = _user.AvatarName.GetManagedFilePath();

        Input.UserName ??= _username;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.UserName != _username)
        {
            var setUserNameResult = await UserManager.SetUserNameAsync(_user, Input.UserName);
            if (setUserNameResult.Succeeded is false)
            {
                var allowedCharacters = UserManager.Options.User.AllowedUserNameCharacters;
                var errorMessage = $"Ошибка установки никнейма. Убедитесь что используете только символы из списка {allowedCharacters}";
                RedirectManager.RedirectToCurrentPageWithStatus(errorMessage, HttpContext);
            }
        }

        if (Input.NewAvatar is not null)
        {
            var file = await ManagedFileService.SaveFile(Input.NewAvatar, _user.Id, ManagedFileScope.Avatar);
            _user.Avatar = file;
            await UserManager.UpdateAsync(_user);
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Профиль успешно обновлен!", HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "Имя пользователя")]
        public string? UserName { get; set; }

        [Display(Name = "Новый аватар")]
        public IFormFile? NewAvatar { get; set; }
    }
}